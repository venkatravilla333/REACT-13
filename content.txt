

                                        React js
                                        ========

1) What is React?
   ==============


    1) React is an open-source javaScript library for creating user interfaces (UIs). 

    2) It was developed by Facebook.

    3) React is a component based library. Components are re-usable.

    4) React is used for creating dynamic web applications, react can update and render 
       data efficiently when the data changes (state).

    5) React uses virtual representation of DOM to efficiently update and render data in UI. Instead of directly manipulating the actual DOM, React calculates the minimal set of changes needed and updates the virtual DOM, which is efficiently applied to actual DOM.

    6) React utilizes JSX (JavaScript XML), It allows developers to write HTML-like syntax within JavaScript code. This helps developers for developing UI fast and easily.

    7) React follows a uni-directional data flow pattern, where data flows from parent components to child components via props. 

    8) React can do only one thing that is it can render data fastly and efficiently in webpages.

    9) React provides the facility of integrating with other libraries, frameworks and languages easily to develop additional functionality.

    10) React works as a declarative library.

    11) React can develop single page applications by using react-router-dom library.



2) DOM Manipulation
   ================

   In Javascript
   -------------

    <script>

         var h1 = document.createElement('h1')

         h1.innerHTML = 'Hello react'

         var root = document.getElementById('root')

         root.appendChild(h1)

    </script>



    In React
    --------

     <script>

          var h1 = React.createElement('h1', {}, 'hello world')

          var root = ReactDOM.createRoot(document.getElementById('root'))

          root.render(h1)

     </script>



3) How to install react
   ====================


    Use React and ReactDOM library
    ------------------------------


    1) How to use react by using CDN links
       -----------------------------------

   <script crossorigin src="https://unpkg.com/react@18/umd/react.development.js"></script>
   <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>



    2) How to install react by using create-react-app tool
       ---------------------------------------------------

      => Here by default webpack will be installed (This is also a build tool)

      => npx create-react-app app-name

      => cd app-name

      => npm start



    3) How to install react by using vite tool
       ---------------------------------------

      - Vite is one of the most popular build tool in market.

      - Vite is a build tool that aims to provide a faster development environment.

      - Vite also allows us to select the framework we want to work.

      => npm create vite

      => npm i

      => npm run dev



4) Folder structure in react
   =========================


node_modules
------------

 - "node_modules" contains external libraries and packages that your React application depends on. These modules are managed by a package manager like npm.
 
 - With a package manager like npm, you can use a single command (npm install) to automatically download and install all the dependencies specified in your project's package.json file.

 - No need to send this file to github, it can be generated by using npm install command. So put this folder in .gitignore file. 

public folder
-------------

 - In React.js, the "public" folder is a special directory that contains static assets and files that should be publicly accessible to the client-side of your application.

 - The purpose of the "public" folder is to provide a place for assets that don't need to go through the build process. Unlike the "src" folder, which contains the source code of your React application and gets processed by Webpack and Babel, the "public" folder assets are copied as-is to the build output directory during the build process. 

   index.html file:
   ---------------
 
 - This is the main HTML file that serves as the entry point to your React application. It contains a <div> element with an id='root', which acts as the mount point for the React components. 


src folder
----------
  
 - It's important to note that the "src" folder contains the source code that will be processed and bundled by build tools like webpack, vite and others to create a production-ready version of your application.
 
 - During development, you work in the "src" folder, and the build process outputs the optimized and minified code into a separate "build" or "dist" folder that you can deploy.

   - App.js file:
     -----------
     It is the root/ parent component created by default.

   - main/index.js file:
     ------------------
     This is the linking file, in this file we link root(App) component to index.html file. App component will be rendered in div element of index.html file. 
    

package.json
------------

 - It contains a dependencies that lists all the external libraries and packages that your project depends on. 
 - When you or someone else clones your project and runs npm install, npm reads the package.json file and installs all the listed dependencies along with their specified versions.

package.lock.json
-----------------

 - To summarize, the package-lock.json file and the package.json file work together to manage dependencies, ensure version consistency, provide reproducibility, and enhance the security and integrity of your React.js project.
 
 - It's important to commit both the package-lock.json and the package.json files to version control systems like Git, so others can have a consistent development environment when working on the project.

.gitignore
----------

 - The .gitignore file in a React project is used to specify which files and directories should be ignored by the version control system, such as Git.  

   In a React project, some typical entries you might find in the .gitignore file include:

 - Build Output: Ignore the output directories where the bundled and minified code is generated. These directories are usually named "build" or "dist."

 - Node_Modules: Ignore the "node_modules" directory, which contains all installed dependencies. Since dependencies can be easily re-installed using the package manager there is no need to include them in the version control system.

 - Environment Variables: Ignore files that store sensitive information, such as API keys, passwords, or configuration files specific to your development environment.



5) Components
   ==========


   1) What is component?
      =================

   1) A component is a reusable block of code, it contains a piece of user interface (UI).

   2) User Interface (UI) is a collection of components in react.

   3) Components are re-usable. 
               
   4) Components can maintain state in it and can receive props from parent and return JSX.

   5) Components return JSX, JSX contains UI.

   6) Components can render dynamic data in UI by using props and state.
   
   7) Components can be composed together by nesting them within each other or passing them as props to other components, creating a hierarchy of UI elements. This modular approach allows for reusability, maintainability, and separation of concerns in React applications.



   2) Types of components in react?
      ============================

    In React there are two types of components.
 
    1) Class component:
       ---------------

    - A class component is a type of component that is defined using ES6 classes and 
      extends the React.Component class from React.

    - It can maitain state in it and can receive props from parent and return JSX.

    - It has a constructor where the initial state can be defined.

    - The render method is a compulsory method in a class component. Render method returns 
      the JSX that defines the component's UI.
      
    - In class components we have to bind "this" keyword when we handle with events.

    - Class components can't undersand by browser which need to be converted into pure
      javascript by using Babel (Transpiler).

      
    2) Functional component:
       --------------------

    - A functional component is a type of component that is defined using JavaScript function.

    - It can maitain state in it and can receive props from parent and return JSX.
 
    - The function body returns the JSX that defines the component's UI.
    
    - No need of constructor and render() method and "this" key word in functional components.

    - Functional component is a javascript function which can be undersand by browser easily. No need of conversion.

    - After introduction of hooks functional components are not stateless. By using useSate hook we can maintain state in functional component.

    - Functional components are simpler and more lightweight compared to class components. 
